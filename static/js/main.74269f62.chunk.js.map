{"version":3,"sources":["sound/beep.mp3","reducers/index.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","type","min","sec","sLength","bLength","timerState","input","timerReducer","timer","state","action","clearInterval","Timer","props","isBreak","start","bind","pause","stop","tick","intMin","this","data","intSec","breakv","sessionv","Audio","sound","play","setState","timerStates","setInterval","minFormat","toString","secFormat","id","className","length","style","marginRight","marginLeft","onClick","React","Component","connect","dispatch","mess","ClockBody","sessionIncrement","sessionDecrement","breakIncrement","breakDecrement","sessionL","parseInt","temp","breakL","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74269f62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.006ba76b.mp3\";","const initialState = {\r\n  type: \"PAUSE\",\r\n  min: 25,\r\n  sec: 0,\r\n  sLength: 25,\r\n  bLength: 5\r\n};\r\n\r\nexport const timerState = (input) => {\r\n  if (input === \"START\") {\r\n    return {\r\n      type: \"START\"\r\n    };\r\n  } else if (input === \"PAUSE\") {\r\n    return {\r\n      type: \"PAUSE\"\r\n    };\r\n  } else if (input === \"RESET\") {\r\n    return {\r\n      type: \"RESET\"\r\n    };\r\n  } else if (input.type === \"sessionIncrement\") {\r\n    return {\r\n      type: \"sessionIncrement\",\r\n      min: input.min,\r\n      bLength: input.bLength,\r\n      sLength: input.sLength\r\n    }\r\n  } else if (input.type === \"sessionDecrement\") {\r\n    return {\r\n      type: \"sessionDecrement\",\r\n      min: input.min,\r\n      bLength: input.bLength,\r\n      sLength: input.sLength\r\n    }\r\n  } else if (input.type === \"breakIncrement\") {\r\n    return {\r\n      type: \"breakIncrement\",\r\n      bLength: input.bLength,\r\n      sLength: input.sLength\r\n    }\r\n  } else if (input.type === \"breakDecrement\") {\r\n    return {\r\n      type: \"breakDecrement\",\r\n      bLength: input.bLength,\r\n      sLength: input.sLength\r\n    }\r\n  } else if (input.type === \"UPDATE\") {\r\n    return {\r\n      type: \"UPDATE\",\r\n      min: input.min,\r\n      sec: input.sec\r\n    }\r\n  }\r\n}\r\n\r\nconst timerReducer = (state = initialState, action) => {\r\n  var timer;\r\n  switch (action.type) {\r\n    case \"START\":\r\n      return {\r\n        type: \"START\",\r\n        min: state.min,\r\n        sec: state.sec,\r\n        sLength: state.sLength,\r\n        bLength: state.bLength\r\n      }\r\n    case \"PAUSE\":\r\n      clearInterval(timer);\r\n      return {\r\n        type: \"PAUSE\",\r\n        min: state.min,\r\n        sec: state.sec,\r\n        sLength: state.sLength,\r\n        bLength: state.bLength\r\n      };\r\n    case \"RESET\":\r\n      return {\r\n        type: \"RESET\",\r\n        min: 25,\r\n        sec: 0,\r\n        sLength: 25,\r\n        bLength: 5\r\n      };\r\n    case \"sessionIncrement\":\r\n    case \"sessionDecrement\":\r\n      return {\r\n        type: \"PAUSE\",\r\n        min: action.min,\r\n        sec: 0,\r\n        sLength: action.sLength,\r\n        bLength: action.bLength\r\n      };\r\n    case \"breakIncrement\":\r\n    case \"breakDecrement\":\r\n      return {\r\n        type: \"PAUSE\",\r\n        min: state.min,\r\n        sec: state.sec,\r\n        sLength: action.sLength,\r\n        bLength: action.bLength\r\n      };\r\n    case \"UPDATE\":\r\n      return {\r\n        type: \"START\",\r\n        min: action.min,\r\n        sec: action.sec,\r\n        sLength: state.sLength,\r\n        bLength: state.bLength\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default timerReducer;","import React from 'react';\r\nimport '../App.css';\r\nimport { connect } from 'react-redux';\r\nimport sound from '../sound/beep.mp3';\r\nimport { timerState } from '../reducers/index'\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isBreak: false,\r\n      timer: null\r\n    };\r\n    this.start = this.start.bind(this);\r\n    this.pause = this.pause.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n    this.tick = this.tick.bind(this);\r\n  }\r\n\r\n  tick() {\r\n    var intMin = this.props.data.min;\r\n    var intSec = this.props.data.sec;\r\n    var breakv = this.props.data.bLength;\r\n    var sessionv = this.props.data.sLength;\r\n\r\n    if (intMin === 0 && intSec === 0 && !this.state.isBreak) {\r\n      new Audio(sound).play();\r\n      this.setState({\r\n        isBreak: true\r\n      })\r\n\r\n      this.props.timerStates({\r\n        type: \"UPDATE\",\r\n        min: breakv,\r\n        sec: 0\r\n      });\r\n      return;\r\n    } else if (intMin === 0 && intSec === 0 && this.state.isBreak) {\r\n      new Audio(sound).play();\r\n      this.setState({\r\n        isBreak: false\r\n      })\r\n\r\n      this.props.timerStates({\r\n        type: \"UPDATE\",\r\n        min: sessionv,\r\n        sec: 0\r\n      });\r\n      return;\r\n    }\r\n    else if (intSec === 0) {\r\n      intMin--;\r\n      intSec = 59;\r\n    } else {\r\n      intSec--;\r\n    }\r\n\r\n    this.props.timerStates({\r\n      type: \"UPDATE\",\r\n      min: intMin,\r\n      sec: intSec\r\n    });\r\n  }\r\n\r\n  start() {\r\n    if (this.state.timer === null) {\r\n      this.props.timerStates(\"START\");\r\n      let timer = setInterval(this.tick, 1000);\r\n      this.setState({\r\n        timer: timer\r\n      })\r\n    }\r\n  }\r\n\r\n  pause() {\r\n    this.props.timerStates(\"PAUSE\");\r\n    clearInterval(this.state.timer);\r\n    this.setState({\r\n      timer: null\r\n    })\r\n  }\r\n\r\n  stop() {\r\n    this.props.timerStates(\"RESET\");\r\n    clearInterval(this.state.timer);\r\n    this.setState({\r\n      timer: null,\r\n      isBreak: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    var minFormat = this.props.data.min.toString();\r\n    var secFormat = this.props.data.sec.toString();\r\n    return (\r\n      <div id=\"timerBody\">\r\n        <h3 id=\"timer-label\">{(this.state.isBreak) ? \"Break\" : \"Session\"}</h3>\r\n        <div id=\"timer-container\" className={(minFormat === \"0\") ? \"warning\" : null}>\r\n          <h1 className=\"timer\" id=\"mins\">{(minFormat.length === 1) ? \"0\" + minFormat : minFormat}</h1>\r\n          <h1 className=\"timer\" style={{ marginRight: \"5px\", marginLeft: \"5px\" }}>:</h1>\r\n          <h1 className=\"timer\" id=\"sec\">{(secFormat.length === 1) ? \"0\" + secFormat : secFormat}</h1>\r\n        </div>\r\n        <div id=\"button-container\">\r\n          <button id=\"start\" onClick={this.start}>start</button>\r\n          <button id=\"pause\" onClick={this.pause}>pause</button>\r\n          <button id=\"reset\" onClick={this.stop}>reset</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  timerStates: (mess) => {\r\n    dispatch(timerState(mess))\r\n  }\r\n});\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { data: state }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import React from 'react';\nimport './App.css';\nimport Timer from './components/timer'\nimport { connect } from 'react-redux';\nimport { timerState } from './reducers/index'\n\nclass ClockBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.sessionIncrement = this.sessionIncrement.bind(this);\n    this.sessionDecrement = this.sessionDecrement.bind(this);\n    this.breakIncrement = this.breakIncrement.bind(this);\n    this.breakDecrement = this.breakDecrement.bind(this);\n  }\n\n  sessionIncrement() {\n    if (this.props.data.type !== \"START\") {\n      var sessionL = parseInt(this.props.data.sLength, 10);\n\n      if (sessionL !== 60) {\n        sessionL = sessionL + 1;\n\n        this.props.timerStates({\n          type: \"sessionIncrement\",\n          min: sessionL,\n          bLength: this.props.data.bLength,\n          sLength: sessionL\n        });\n      }\n    }\n  }\n\n  sessionDecrement() {\n    if (this.props.data.type !== \"START\") {\n      var temp = parseInt(this.props.data.sLength, 10);\n      if (temp !== 1) {\n        temp = temp - 1;\n\n        this.props.timerStates({\n          type: \"sessionDecrement\",\n          min: temp,\n          bLength: this.props.data.bLength,\n          sLength: temp\n        });\n      }\n    }\n  }\n\n  breakIncrement() {\n    if (this.props.data.type !== \"START\") {\n      var breakL = parseInt(this.props.data.bLength, 10);\n\n      if (breakL !== 60) {\n        breakL = breakL + 1;\n\n        this.props.timerStates({\n          type: \"breakIncrement\",\n          bLength: breakL,\n          sLength: this.props.data.sLength\n        });\n      }\n    }\n  }\n\n  breakDecrement() {\n    if (this.props.data.type !== \"START\") {\n      var temp = parseInt(this.props.data.bLength, 10);\n      if (temp !== 1) {\n        temp = temp - 1;\n\n        this.props.timerStates({\n          type: \"breakDecrement\",\n          bLength: temp,\n          sLength: this.props.data.sLength\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"main-container\">\n        <h1 id=\"title\">Pomodoro Clock</h1>\n\n        <p id=\"break-label\">Break Length</p>\n        <button id=\"break-decrement\" onClick={this.breakDecrement}>-</button>\n        <p id=\"break-length\">{this.props.data.bLength}</p>\n        <button id=\"break-increment\" onClick={this.breakIncrement}>+</button><br />\n\n        <p id=\"session-label\">Session Length</p>\n        <button id=\"session-decrement\" onClick={this.sessionDecrement}>-</button>\n        <p id=\"session-length\">{this.props.data.sLength}</p>\n        <button id=\"session-increment\" onClick={this.sessionIncrement}>+</button>\n        <Timer />\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  timerStates: (mess) => {\n    dispatch(timerState(mess))\n  }\n});\n\nconst mapStateToProps = (state) => {\n  return { data: state }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClockBody);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport timerReducer from './reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nlet store = createStore(timerReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}